plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.google.cloud.tools.jib' version '3.3.2'
}

group = 'garretreichenbach.taskprocessor'
version = '1.0.0'

java {
	sourceCompatibility = JavaVersion.VERSION_21
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.maven.apache.org/maven2' }
}

dependencies {
	// Spring Boot dependencies
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-logging'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-tomcat'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// JSON processing
	implementation 'com.fasterxml.jackson.core:jackson-databind'

	// Concurrency utilities
	implementation 'com.google.guava:guava:32.0.1-android'

	// Lombok to reduce boilerplate
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Compression libraries
	implementation 'org.apache.commons:commons-compress:1.26.0'
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'commons-io:commons-io:2.19.0'

	// LuaJ for Lua scripting
	implementation 'org.luaj:luaj-jse:3.0.1'

	// Logging
	implementation 'org.slf4j:slf4j-api'

	// JSON
	implementation 'org.json:json:20231013'

	// Testing dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Jib configuration for building container images
jib {
	from {
		image = 'eclipse-temurin:21-jre-alpine'
	}
	to {
		image = 'thederpgamer/task-processor'
		tags = ['latest', "${version}"]
		auth {
			username = findProperty('dockerUsername')
			password = findProperty('dockerPassword')
		}
	}
	container {
		ports = ['8080']
		jvmFlags = ['-Xms1g', '-Xmx4g']
	}
	container.mainClass = 'garretreichenbach.taskprocessor.TaskProcessorApplication'
}

jar {
	version = ''
	archiveClassifier.set('')
}